This project was bootstrapped with [[https://github.com/facebook/create-react-app][Create React App]].


** APP DIAGRAM 


[[file:./public/react-todo-app-diagram.png]]

** STATE TRANSITION TABLE 

| state    | input   | next state |
|----------+---------+------------|
| IDLE     | create  | CREATING   |
| IDLE     | fetch   | LOADING    |
| IDLE     | update  | UPDATING   |
| IDLE     | delete  | DELETING   |
|----------+---------+------------|
| CREATING | fetch   | LOADING    |
|----------+---------+------------|
| UPDATING | fetch   | LOADING    |
|----------+---------+------------|
| DELETING | fetch   | LOADING    |
| DELETING | reject  | FAILURE    |
|----------+---------+------------|
| LOADING  | reject  | FAILURE    |
| LOADING  | resolve | IDLE       |
|----------+---------+------------|
| FAILURE  | fetch   | IDLE       |
|----------+---------+------------|

*** STATE DESCRIPTION

#+BEGIN_SRC  js
const NEXTSTATE = {
    STATE: {
      event: {
         status: NEXTSTATE,
         id: id,
         error: error,
         data: data
      }
    }
}
#+END_SRC



*** STATE OBJECT

#+BEGIN_SRC js
const NEXTSTATE = {
      IDLE: {
          fetch:  {
              ...state,
              status:  'LOADING',
          }, 
          create: { 
              ...state,
               status:  'CREATING'
          },
          update: {
              ...state,
              status:  'UPDATING',
              id: event.id
          },
          delete: {
              ...state,
              status:  'DELETING',
              id: event.id
          }
      },
      CREATING: {
          fetch:  {
              ...state,
              status:  'LOADING'
          }, 
      },
      UPDATING: {
          fetch:  {
              ...state,
              status:  'LOADING',
          }, 
      },
      DELETING: {
          fetch:  {
              ...state,
              status:  'LOADING'  
          }, 
          reject:  {
              ...state,
              status: 'FAILURE',
              error: event.error
          }
      },
      LOADING: {
          resolve: {
              ...state,
              status: 'IDLE',
              data: event.data
          },
          reject:  {
              ...state,
              status: 'FAILURE',
              error: event.error
          }
      },
      FAILURE: {
          fetch:   {
              ...state,
              status: 'IDLE',
  //         error: event.error
          }
      }
}
#+END_SRC



** GETTING THE  NEXT STATE
   
#+BEGIN_SRC js
 const nextState = NEXTSTATE[state.status][event.type];
 return nextState !== undefined ? nextState : state;
#+END_SRC


** ACTIONS AND DISPATCH
  
| state    | action   |
|----------+----------|
| CREATING | create() |
|----------+----------|
| LOADING  | read()   |
|----------+----------|
| UPDATING | update() |
|----------+----------|
| DELETING | remove() |
|----------+----------|

The actions(create, read, update and remove) are async functions that are called inside =useEffect= and they also dispatch the events.   

The only dependency in the dependency array is =state.status= and this generate a warning:

#+BEGIN_QUOTE
React Hook useEffect has missing dependencies: 'query' and 'state.id'. Either include them or remove the dependency array  react-hooks/exhaustive-deps
#+END_QUOTE

This is because React wants to avoid update inconsistencies. React is watching for 'data' changes (query, state.id) but I want to focus in =state= changes (at the moment I'm ignoring this warning because I can't identify a problem in the app with the current approach).
 
 

#+BEGIN_SRC js 
   // CREATE   
   if(state.status === 'CREATING' ) {
     create();
   }

   // READ
   if(state.status === 'LOADING') {
     read();
   }

      
   // UPDATE 
   if(state.status === 'UPDATING' ) {
      update();
   }

   // DELETE
   if(state.status === 'DELETING' ) {
      remove();
   }

  }, [state.status]);
#+END_SRC


*** Functions

- Create

#+BEGIN_SRC js
async  function create() {
       try {
           await axios.post('http://localhost:5000/todo', {data: query});
           await setQuery('');
           await dispatch({type: 'fetch'});
       } catch(error) {
           await dispatch({type: 'fetch'});
       }
    }
#+END_SRC

- Read

#+BEGIN_SRC js
async  function read() {
       try {
         const res  = await axios.get('http://localhost:5000/todo');
         const data = await res.data.data;
         await dispatch({type: 'resolve',  data});
       } catch(error) {
          await dispatch({type: 'reject',  error});
       }
    }
#+END_SRC

- Update

#+BEGIN_SRC js
async  function update() {
      try {
        await   axios.put('http://localhost:5000/todo', {id: state.id});
        await dispatch({type: 'fetch'});
      } catch(error) {
        await dispatch({type: 'reject',  error});
      }
   }
#+END_SRC

- Remove (Delete)

#+BEGIN_SRC js
async  function remove() {
      try {
          await axios({
              method: 'DELETE',
               url: 'http://localhost:5000/todo',  
                headers: {
                  Accept: 'application/json',
                  'Content-Type': 'application/json'
                },
              data: {
                  id: state.id
              }
             });
         await dispatch({type: 'fetch'});
      } catch(error) {
         await dispatch({type: 'reject',  error});
      } 
  }
#+END_SRC



   
